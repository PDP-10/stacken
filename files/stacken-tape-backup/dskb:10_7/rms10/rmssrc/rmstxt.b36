
MODULE TEXT =


BEGIN

GLOBAL BIND	TEXTV = 1^24 + 0^18 + 15;	!EDIT DATE: 29-NOV-76

%([

AUTHOR:	S. BLOUNT

THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY ONLY BE USED
  OR COPIED IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.

!COPYRIGHT (C) 1977, 1979 BY DIGITAL EQUIPMENT CORPORATION



	THIS MODULE CONTAINS ALL ERROR MESSAGE TEXT WHICH
	IS GENERATED FROM WITHIN RMS-20.  THESE MESSAGES
	OCCUR IN THE FOLLOWING CIRCUMSTANCES:

		1 )  FILE CONSISTENCY PROBLEM
		2 )  INTERNAL ERROR ( BUG )

	NO USER ERROR MESSAGES ARE GENERATED WITHIN RMS-20.







REVISION HISTORY:

EDIT	WHO	DATE		PURPOSE
====	===	====		=======

1	JK	20-JUL-76	ADD ERROR CODE TO RMSMSG MACRO
				NOTE: RMSERR HAS BEEN MODIFIED SO THAT
					'CRASH'; AND 'FPROBLEM' KNOW THAT
					THE FIRST WORD OF THEIR ARGUMENT
					CONTAINS THE ERROR CODE AND THE TEXT
					OF THE MESSAGE RESIDES IN THE 2ND
					THROUGH NTH WORDS.
2	JK	22-JUL-76		ADD MSGCAP
3	SB	30-JUL-76	CHANGE MOST ERUDF TO ER$BUG
4	SB	12-AUG-76	ADD MSGLEVEL,MSGNOSPACE,...
5	SB	13-AUG-76	ADD IDSRANOUT,...
6	SB	15-AUG-76	ADD MSGPTR (BAD PTR)
7	JK	25-AUG-76	ADD MSGCCR (CAN'T CREATE RRV RECORD)
8	SB	1-SEP-76	ADD MSGNORRV (NO RRV RECORD FOUND FOR DATA)

9	SB	8-SEP-76	ADD MSGCUINDEX (MAY NOT NEED THIS LATER)

10	SB	9-27-76		ADD MSGNOCALL
11	SB	4-OCT-76	ADD MSGRRV
12	SB	7-OCT-76	DELETE GBASCII
13	SB	25-OCT-76	ADD MSGBNA
14	SB	1-NOV-76	TAKE OUT ALL UDF ERRORS
15	SB	29-NOV-76	ADD MSGBKT

*************************************************
*						*
*		NEW REVISION HISTORY		*
*						*
*************************************************

PRODUCT	MODULE	 SPR
 EDIT	 EDIT	 QAR		DESCRIPTION
======	======	=====		===========


	***** END OF REVISION HISTORY *****




])%



REQUIRE 'RMSREQ';





	%([ MACRO USED TO GENERATE AN ERROR MESSAGE ])%

	MACRO	RMSMSG ( NAME, CODE,  TEXT ) =
		BIND DUM = PLIT (  CODE, TEXT ):  VECTOR;
		GLOBAL BIND NAME = DUM;
!		BIND DUM = PLIT ( NAME %(**WARNING**BLISS10**)%GLOBALLY %(**WARNING**BLISS10**)%NAMES CODE,  TEXT  )	:VECTOR;
		UNDECLARE DUM %;





	%([ RMS-20 ERROR MESSAGES ])%


%([			RMS SYMBOL	USER ERROR	MESSAGE TEXT
			=== ======	==== =====	======= ====
])%
	RMSMSG	(	MSGBKT,		ER$BUG,		%STRING('CURRENT BUCKET IS EMPTY',%CHAR(0)));
	RMSMSG	(	MSGBNA,		ER$BUG,		%STRING('BUFFER NOT ALLOCATED',%CHAR(0)));
	RMSMSG	(	MSGBUSY,	ER$BUG,		%STRING('BUSY STATUS WAS RETURNED UNEXPECTANTLY',%CHAR(0)));
	RMSMSG	(	MSGBSTATUS,	ER$BUG,		%STRING('BAD STATUS RETURNED BY A ROUTINE',%CHAR(0)));
	RMSMSG	(	MSGCANTGETHERE,	ER$BUG,		%STRING('RMS IS EXECUTING PAST ITS BOUNDARIES',%CHAR(0)));
	RMSMSG	(	MSGCCR,		ER$BUG,		%STRING('CAN''T CREATE RRV RECORD; NO ROOM IN BKT',%CHAR(0)));
	RMSMSG	(	MSGCOUNT,	ER$BUG,		%STRING('INVALID COUNT VALUE DETECTED ',%CHAR(0)) );
	RMSMSG	(	MSGDUP,		ER$BUG,		%STRING('DUPLICATE PRIMARY KEY FOUND',%CHAR(0)));
	RMSMSG	(	MSGEOP,		ER$BUG,		%STRING('END-OF-PAGE MARKER FOUND',%CHAR(0)));
	RMSMSG	(	MSGFAILURE,	ER$BUG,		%STRING('LAST ROUTINE RETURNED A FALSE VALUE',%CHAR(0)) );
	RMSMSG	(	MSGFLAGS,	ER$BUG,		%STRING('FLAG VALUES ARE BAD',%CHAR(0)));
	RMSMSG	(	MSGINPUT,	ER$BUG,		%STRING('INCORRECT INPUT PARAMETERS DETECTED ',%CHAR(0)) );
	RMSMSG  (	MSGLEVEL,	ER$BUG,		%STRING('LEVEL DISCREPANCY FOUND DURING EXECUTION.',%CHAR(0)));
	RMSMSG	(	MSGLOOP,	ER$BUG,		%STRING('LOOP INTERATION COUNTER BAD',%CHAR(0)) );
	RMSMSG	(	MSGNOCALL,	ER$BUG,		%STRING('THE CURRENT ROUTINE SHOULD NOT HAVE BEEN CALLED.',%CHAR(0)));
	RMSMSG	(	MSGNOSPACE,	ER$BUG,		%STRING('NO SPACE FOUND FOR INDEX RECORDS',%CHAR(0)));
	RMSMSG	(	MSGPAGE,	ER$BUG,		%STRING('INVALID PAGE NUMBER DETECTED ',%CHAR(0)) );
	RMSMSG	(	MSGPNA,		ER$BUG,		%STRING('FREE PAGE HAS NOT BEEN ALLOCATED',%CHAR(0)));
	RMSMSG	(	MSGRCHANGED,	ER$BUG,		%STRING('ROOT BUCKET HAS CHANGED',%CHAR(0)));
	RMSMSG	(	MSGPTR,		ER$BUG,		%STRING('POINTER VARIABLE HAS BAD VALUE',%CHAR(0)));
	RMSMSG	(	MSGRFA,		ER$BUG,		%STRING('INVALID RFA VALUE DETECTED ',%CHAR(0)) );
	RMSMSG	(	MSGRRV,		ER$BUG,		%STRING('RRV FOUND IN SEC. DATA  RECORD BUCKET',%CHAR(0)));
	RMSMSG	(	MSGSPLIT,	ER$BUG,		%STRING('BUCKET SPLIT PARAMETERS ARE BAD',%CHAR(0)));
	RMSMSG	(	MSGFUNCTION,	ER$BUG,		%STRING('INVALID FUNCTION CODE DETECTED',%CHAR(0)) );
	RMSMSG	(	MSGKDB,		ER$BUG,		 %STRING('KDB FIELDS GOT MESSED UP',%CHAR(0)) );
	RMSMSG	(	MSGKEY,		ER$BUG,		%STRING('KEY ADDRESSING NOT DETECTED',%CHAR(0)) );
	RMSMSG	(	MSGKSZ,		ER$BUG,		%STRING('BAD KEY SIZE PARAMETER FOUND',%CHAR(0)));
	RMSMSG	(	MSGLINK,	ER$BUG,		%STRING('BAD LINK FOUND IN INTERNAL BLOCK',%CHAR(0)) );
	RMSMSG	(	MSGCORE,	ER$BUG,		%STRING('GMEM CANT GET CORE',%CHAR(0)) );
	RMSMSG	(	MSGGM1,		ER$BUG,		%STRING('RETURNED VALUE IS BAD',%CHAR(0)) );
	RMSMSG	(	MSGBSP,		ER$BUG,		%STRING('CORE BLOCK SPANS PAGES',%CHAR(0)) );
	RMSMSG	(	MSGPM2,		ER$BUG,		%STRING('BIGHOL IS NON-ZERO',%CHAR(0)) );
	RMSMSG	(	MSGPM3,		ER$BUG,		%STRING('BAD VALUE FOUND',%CHAR(0)) );
	RMSMSG	(	MSGNLW,		ER$BUG,		%STRING('NULL FILE WINDOW DETECTED',%CHAR(0)) );
	RMSMSG	(	MSGMOVESTRING,	ER$BUG,		%STRING('MOVE-STRING FAILED',%CHAR(0)) );
	RMSMSG	(	MSGJSYS,	ER$BUG,		%STRING('INVALID JSYS CODE DETECTED',%CHAR(0)) );

END
ELUDOM
